"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var browser_core_1 = require("@datadog/browser-core");
var getDocumentTraceId_1 = require("./getDocumentTraceId");
var lifeCycle_1 = require("./lifeCycle");
var resourceUtils_1 = require("./resourceUtils");
function supportPerformanceObject() {
    return window.performance !== undefined && 'getEntries' in performance;
}
function supportPerformanceNavigationTimingEvent() {
    return (window.PerformanceObserver &&
        PerformanceObserver.supportedEntryTypes !== undefined &&
        PerformanceObserver.supportedEntryTypes.includes('navigation'));
}
function startPerformanceCollection(lifeCycle, configuration) {
    retrieveInitialDocumentResourceTiming(function (timing) {
        handleRumPerformanceEntry(lifeCycle, configuration, timing);
    });
    if (supportPerformanceObject()) {
        handlePerformanceEntries(lifeCycle, configuration, performance.getEntries());
    }
    if (window.PerformanceObserver) {
        var observer = new PerformanceObserver(browser_core_1.monitor(function (entries) { return handlePerformanceEntries(lifeCycle, configuration, entries.getEntries()); }));
        var entryTypes = ['resource', 'navigation', 'longtask'];
        // cf https://github.com/w3c/paint-timing/issues/40
        if (document.visibilityState === 'visible') {
            entryTypes.push('paint');
        }
        observer.observe({ entryTypes: entryTypes });
        if (supportPerformanceObject() && 'addEventListener' in performance) {
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1559377
            performance.addEventListener('resourcetimingbufferfull', function () {
                performance.clearResourceTimings();
            });
        }
    }
    if (!supportPerformanceNavigationTimingEvent()) {
        retrieveNavigationTiming(function (timing) {
            handleRumPerformanceEntry(lifeCycle, configuration, timing);
        });
    }
}
exports.startPerformanceCollection = startPerformanceCollection;
function retrieveInitialDocumentResourceTiming(callback) {
    runOnReadyState('interactive', function () {
        var timing;
        var forcedAttributes = {
            entryType: 'resource',
            initiatorType: resourceUtils_1.FAKE_INITIAL_DOCUMENT,
            traceId: getDocumentTraceId_1.getDocumentTraceId(document),
        };
        if (supportPerformanceNavigationTimingEvent() && performance.getEntriesByType('navigation').length > 0) {
            var navigationEntry = performance.getEntriesByType('navigation')[0];
            timing = tslib_1.__assign(tslib_1.__assign({}, navigationEntry.toJSON()), forcedAttributes);
        }
        else {
            var relativePerformanceTiming = computeRelativePerformanceTiming();
            timing = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, relativePerformanceTiming), { decodedBodySize: 0, duration: relativePerformanceTiming.responseEnd, name: window.location.href, startTime: 0 }), forcedAttributes);
        }
        callback(timing);
    });
}
exports.retrieveInitialDocumentResourceTiming = retrieveInitialDocumentResourceTiming;
function retrieveNavigationTiming(callback) {
    function sendFakeTiming() {
        callback(tslib_1.__assign(tslib_1.__assign({}, computeRelativePerformanceTiming()), { entryType: 'navigation' }));
    }
    runOnReadyState('complete', function () {
        // Send it a bit after the actual load event, so the "loadEventEnd" timing is accurate
        setTimeout(browser_core_1.monitor(sendFakeTiming));
    });
}
function runOnReadyState(expectedReadyState, callback) {
    if (document.readyState === expectedReadyState || document.readyState === 'complete') {
        callback();
    }
    else {
        var eventName_1 = expectedReadyState === 'complete' ? browser_core_1.DOM_EVENT.LOAD : browser_core_1.DOM_EVENT.DOM_CONTENT_LOADED;
        var listener_1 = browser_core_1.monitor(function () {
            window.removeEventListener(eventName_1, listener_1);
            callback();
        });
        window.addEventListener(eventName_1, listener_1);
    }
}
function computeRelativePerformanceTiming() {
    var result = {};
    var timing = performance.timing;
    for (var key in timing) {
        if (browser_core_1.isNumber(timing[key])) {
            result[key] = timing[key] === 0 ? 0 : browser_core_1.getRelativeTime(timing[key]);
        }
    }
    return result;
}
function handlePerformanceEntries(lifeCycle, configuration, entries) {
    entries.forEach(function (entry) {
        if (entry.entryType === 'resource' ||
            entry.entryType === 'navigation' ||
            entry.entryType === 'paint' ||
            entry.entryType === 'longtask') {
            handleRumPerformanceEntry(lifeCycle, configuration, entry);
        }
    });
}
function handleRumPerformanceEntry(lifeCycle, configuration, entry) {
    if (isIncompleteNavigation(entry) || isForbiddenResource(configuration, entry)) {
        return;
    }
    lifeCycle.notify(lifeCycle_1.LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, entry);
}
function isIncompleteNavigation(entry) {
    return entry.entryType === 'navigation' && entry.loadEventEnd <= 0;
}
function isForbiddenResource(configuration, entry) {
    return entry.entryType === 'resource' && !resourceUtils_1.isAllowedRequestUrl(configuration, entry.name);
}
//# sourceMappingURL=performanceCollection.js.map