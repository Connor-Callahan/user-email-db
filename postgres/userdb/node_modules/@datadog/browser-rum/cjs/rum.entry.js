"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var browser_core_1 = require("@datadog/browser-core");
var rum_1 = require("./rum");
var userActionCollection_1 = require("./userActionCollection");
exports.datadogRum = makeRumGlobal(rum_1.startRum);
browser_core_1.defineGlobal(browser_core_1.getGlobalObject(), 'DD_RUM', exports.datadogRum);
function makeRumGlobal(startRumImpl) {
    var isAlreadyInitialized = false;
    var globalContextManager = browser_core_1.createContextManager();
    var getInternalContextStrategy = function () {
        return undefined;
    };
    var beforeInitAddUserAction = new browser_core_1.BoundedBuffer();
    var addUserActionStrategy = function (action) {
        beforeInitAddUserAction.add([action, browser_core_1.deepClone(globalContextManager.get())]);
    };
    return browser_core_1.makeGlobal({
        init: browser_core_1.monitor(function (userConfiguration) {
            var _a;
            if (!browser_core_1.checkCookiesAuthorized(browser_core_1.buildCookieOptions(userConfiguration)) ||
                !browser_core_1.checkIsNotLocalFile() ||
                !canInitRum(userConfiguration)) {
                return;
            }
            if (userConfiguration.publicApiKey) {
                userConfiguration.clientToken = userConfiguration.publicApiKey;
            }
            ;
            (_a = startRumImpl(userConfiguration, globalContextManager.get), getInternalContextStrategy = _a.getInternalContext, addUserActionStrategy = _a.addUserAction);
            beforeInitAddUserAction.drain(function (_a) {
                var action = _a[0], context = _a[1];
                return addUserActionStrategy(action, context);
            });
            isAlreadyInitialized = true;
        }),
        addRumGlobalContext: browser_core_1.monitor(globalContextManager.add),
        removeRumGlobalContext: browser_core_1.monitor(globalContextManager.remove),
        setRumGlobalContext: browser_core_1.monitor(globalContextManager.set),
        getInternalContext: browser_core_1.monitor(function (startTime) {
            return getInternalContextStrategy(startTime);
        }),
        addUserAction: browser_core_1.monitor(function (name, context) {
            addUserActionStrategy({
                name: name,
                context: browser_core_1.deepClone(context),
                startTime: performance.now(),
                type: userActionCollection_1.UserActionType.CUSTOM,
            });
        }),
    });
    function canInitRum(userConfiguration) {
        if (isAlreadyInitialized) {
            if (!userConfiguration.silentMultipleInit) {
                console.error('DD_RUM is already initialized.');
            }
            return false;
        }
        if (!userConfiguration || (!userConfiguration.clientToken && !userConfiguration.publicApiKey)) {
            console.error('Client Token is not configured, we will not send any data.');
            return false;
        }
        if (!userConfiguration.applicationId) {
            console.error('Application ID is not configured, no RUM data will be collected.');
            return false;
        }
        if (userConfiguration.sampleRate !== undefined && !browser_core_1.isPercentage(userConfiguration.sampleRate)) {
            console.error('Sample Rate should be a number between 0 and 100');
            return false;
        }
        if (userConfiguration.resourceSampleRate !== undefined && !browser_core_1.isPercentage(userConfiguration.resourceSampleRate)) {
            console.error('Resource Sample Rate should be a number between 0 and 100');
            return false;
        }
        if (Array.isArray(userConfiguration.allowedTracingOrigins) &&
            userConfiguration.allowedTracingOrigins.length !== 0 &&
            userConfiguration.service === undefined) {
            console.error('Service need to be configured when tracing is enabled');
            return false;
        }
        return true;
    }
}
exports.makeRumGlobal = makeRumGlobal;
//# sourceMappingURL=rum.entry.js.map