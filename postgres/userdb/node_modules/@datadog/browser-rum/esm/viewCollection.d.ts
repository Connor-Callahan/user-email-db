import { LifeCycle } from './lifeCycle';
import { EventCounts } from './trackEventCounts';
export interface View {
    id: string;
    location: Location;
    referrer: string;
    measures: ViewMeasures;
    documentVersion: number;
    startTime: number;
    duration: number;
    loadingTime?: number | undefined;
    loadingType: ViewLoadingType;
}
export interface ViewCreatedEvent {
    id: string;
    location: Location;
    referrer: string;
    startTime: number;
}
interface Timings {
    firstContentfulPaint?: number;
    domInteractive?: number;
    domContentLoaded?: number;
    domComplete?: number;
    loadEventEnd?: number;
}
export declare type ViewMeasures = Timings & EventCounts;
export declare enum ViewLoadingType {
    INITIAL_LOAD = "initial_load",
    ROUTE_CHANGE = "route_change"
}
export declare const THROTTLE_VIEW_UPDATE_PERIOD = 3000;
export declare const SESSION_KEEP_ALIVE_INTERVAL: number;
export declare function startViewCollection(location: Location, lifeCycle: LifeCycle): {
    stop(): void;
};
export {};
