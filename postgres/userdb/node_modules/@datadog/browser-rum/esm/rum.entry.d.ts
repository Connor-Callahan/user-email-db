import { Context, UserConfiguration } from '@datadog/browser-core';
import { startRum } from './rum';
export interface RumUserConfiguration extends UserConfiguration {
    applicationId: string;
}
export interface InternalContext {
    application_id: string;
    session_id: string | undefined;
    view?: {
        id: string;
        url: string;
        referrer: string;
    };
    user_action?: {
        id: string;
    };
}
export declare type RumGlobal = ReturnType<typeof makeRumGlobal>;
export declare const datadogRum: {
    init: (userConfiguration: RumUserConfiguration) => void;
    addRumGlobalContext: (key: string, value: import("@datadog/browser-core").ContextValue) => void;
    removeRumGlobalContext: (key: string) => void;
    setRumGlobalContext: (newContext: Context) => void;
    getInternalContext: (startTime?: number | undefined) => InternalContext | undefined;
    addUserAction: (name: string, context?: Context | undefined) => void;
} & {
    onReady(callback: () => void): void;
};
export declare type StartRum = typeof startRum;
export declare function makeRumGlobal(startRumImpl: StartRum): {
    init: (userConfiguration: RumUserConfiguration) => void;
    addRumGlobalContext: (key: string, value: import("@datadog/browser-core").ContextValue) => void;
    removeRumGlobalContext: (key: string) => void;
    setRumGlobalContext: (newContext: Context) => void;
    getInternalContext: (startTime?: number | undefined) => InternalContext | undefined;
    addUserAction: (name: string, context?: Context | undefined) => void;
} & {
    onReady(callback: () => void): void;
};
